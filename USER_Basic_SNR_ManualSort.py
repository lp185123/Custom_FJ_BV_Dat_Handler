"""Sort a DC of s39 images with SNR reads into good read and bad reads0"""

import _3DVisLabLib
import Snr_test_fitness
import cv2
import Snr_test_fitness
import TileImages_for_OCR
import shutil
import json
import os
#import pyttsx3
#hardcoded output folders
OutputGoodSNR_Folder=r"C:\Working\FindIMage_In_Dat\OutputTestSNR\ManualCheck_GoodSNR"
OutputBadSNR_Folder=r"C:\Working\FindIMage_In_Dat\OutputTestSNR\ManualCheck_BadSNR"
SaveStateFile=r"C:\Working\FindIMage_In_Dat\OutputTestSNR\\ManCheckSaveState" + ".json"
#ask user for input folder
DefaultFolder=r"C:\Working\FindIMage_In_Dat\OutputTestSNR\TestProcess\CloudOCR"
InputFolder = input("Please enter images folder: Default is:   " + DefaultFolder)
if len(InputFolder)==0:
    InputFolder = DefaultFolder

#get all files in input folder
InputFiles=_3DVisLabLib.GetAllFilesInFolder_Recursive(InputFolder)
#filter out non images
ListAllImages=_3DVisLabLib.GetList_Of_ImagesInList(InputFiles)
#voice synth
#Voicesynthesizer = pyttsx3.init()
#Voicesynthesizer.setProperty('rate', 150)




#prompt user to check filepaths are OK for deletion
print("Please check output folders can be deleted:\n",OutputGoodSNR_Folder, "\n",OutputBadSNR_Folder)
Response=_3DVisLabLib.yesno("Continue?")
if Response==False:
    raise Exception("User declined to delete folders - process terminated")

#delete output folder
_3DVisLabLib.DeleteFiles_RecreateFolder(OutputGoodSNR_Folder)
_3DVisLabLib.DeleteFiles_RecreateFolder(OutputBadSNR_Folder)


#check if saved state exists
Imgpath_Vs_SNR_State=dict()
if os.path.isfile(SaveStateFile)==True:
    print("Previous state detected - load state? WARNING - if saved state generated by older version of script may cause error")
    print(SaveStateFile)
    if _3DVisLabLib.yesno("load previous state?")==True:
        with open(SaveStateFile) as json_file:
            Imgpath_Vs_SNR_State = json.load(json_file)


#load images into memory
#loaded raw images dictionary
ImgPathVsRawImages=dict()
for img in ListAllImages:
    print("loading",img)
    ImgPathVsRawImages[img]=cv2.imread(img,cv2.IMREAD_GRAYSCALE)
    #_3DVisLabLib.ImageViewer_Quickv2(ImgPathVsRawImages[img],0,False,False)

#mirror raw images
ImgPathVsMirroredImages=dict()
for img in ImgPathVsRawImages:
    print("Mirroring image",img)
    ImgPathVsMirroredImages[img]=Snr_test_fitness.MirrorImage(ImgPathVsRawImages[img])
    #_3DVisLabLib.ImageViewer_Quickv2(ImgPathVsMirroredImages[img],0,False,False)

#create dictionary of SNR_VS_mirror images
Imgpath_vs_userImgStack=dict()
for index,img in enumerate(ImgPathVsRawImages):
    
    Get_SNR_string=img.split("[")#delimit
    Get_SNR_string=Get_SNR_string[-1]#get last element of delimited string
    Get_SNR_string=Get_SNR_string.split("]")#delimit
    Get_SNR_string=Get_SNR_string[0]
    if Get_SNR_string is not None:
        if len(Get_SNR_string)>0:#TODO magic number
            #keep consistent format of SNR read string
            Get_SNR_string= Get_SNR_string 
        else:
            Get_SNR_string="NO_SNR"
    else:
            Get_SNR_string="NO_SNR"
    
    #get image with SNR
    #convert list to dict
    #DictAllImages=dict()
    #for img in ListAllImages:
    #    DictAllImages[img]=None
    DelimiterImage,ImageX,ImageY=TileImages_for_OCR.CreateDelimiterImage(ImgPathVsMirroredImages,Get_SNR_string,10)#use valid image file from set to create delimiter image
    print("Building SNR",Get_SNR_string)
    

    SingleDict=dict()
    SingleDict[img]=ImgPathVsMirroredImages[img]
    ImgPath_VS_ImageAndAnswer=TileImages_for_OCR.TileImages_with_delimiterImage(DelimiterImage,SingleDict,ImageY,ImageX,1,"DummyOutputFOlder")
    ColImg=ImgPath_VS_ImageAndAnswer['DummyOutputFOlder\\0.jpg'][2]
    Imgpath_vs_userImgStack[img]=(Get_SNR_string,ColImg)
    #_3DVisLabLib.ImageViewer_Quickv2(ColImg,0,False,False)


#now can display to user

Indexer=0
List_imgpaths=list(Imgpath_vs_userImgStack.keys())
ReturnCode_SNR_OK="g"
ReturnCode_SNR_nOK="b"
while True:
    try:
        Indexer=max(0,Indexer)
        Indexer=min(len(List_imgpaths)-1,Indexer)
        print(Indexer,List_imgpaths[Indexer])
        print(len(Imgpath_Vs_SNR_State),"/" ,len(Imgpath_vs_userImgStack),"to check")
        ImageForUSer=Imgpath_vs_userImgStack[List_imgpaths[Indexer]][1]
        SNR=Imgpath_vs_userImgStack[List_imgpaths[Indexer]][0]
        #add colour if we have already manual checked snr
        if List_imgpaths[Indexer] in Imgpath_Vs_SNR_State:
            ImageForUSer = cv2.cvtColor(ImageForUSer, cv2.COLOR_GRAY2BGR)
            if Imgpath_Vs_SNR_State[List_imgpaths[Indexer]]==ReturnCode_SNR_OK:
                ImageForUSer[:,:,1]=255
            if Imgpath_Vs_SNR_State[List_imgpaths[Indexer]]==ReturnCode_SNR_nOK:
                ImageForUSer[:,:,2]=255
        _3DVisLabLib.ImageViewer_Quickv2_UserControl(ImageForUSer,0,False,False)
        #Voicesynthesizer.say(SNR) 
        #Voicesynthesizer.runAndWait() 
        #Voicesynthesizer.stop()


        returncode=_3DVisLabLib.ImageViewer_Quickv2_UserControl(ImageForUSer,0,True,False)
        if returncode==ReturnCode_SNR_OK:
            Imgpath_Vs_SNR_State[List_imgpaths[Indexer]]=returncode
            Indexer=Indexer+1
        if returncode==ReturnCode_SNR_nOK:
            Imgpath_Vs_SNR_State[List_imgpaths[Indexer]]=returncode
            Indexer=Indexer+1
        if returncode=="o":
            Indexer=Indexer-1
        if returncode=="p":
            Indexer=Indexer+1
        if Indexer==-1:
            Indexer=len(List_imgpaths)-1
        if Indexer==len(List_imgpaths):
            Indexer=0
        if returncode=='n':
            #jump to next unchecked snr
            for IndexChk, ImgChecked in enumerate(List_imgpaths):
                if not (ImgChecked in Imgpath_Vs_SNR_State):
                    Indexer=IndexChk
        if returncode=='x':
            if _3DVisLabLib.yesno("do you wish to extract files? Check info log for status complete")==True:
                break
        with open(r"C:\Working\FindIMage_In_Dat\OutputTestSNR\\ManCheckSaveState" + ".json", 'w') as outfile:
            json.dump(Imgpath_Vs_SNR_State, outfile)

    except:
        print("some problem - develop this")
        Indexer=0

#extract images
for Indexer, Img in enumerate(Imgpath_Vs_SNR_State):
    if Img in Imgpath_vs_userImgStack:
        SNR="[" + Imgpath_vs_userImgStack[Img][0] +"]"
        if Imgpath_Vs_SNR_State[Img]==ReturnCode_SNR_OK:
            shutil.copyfile(Img, OutputGoodSNR_Folder +"\\OKread_" + str(Indexer) + SNR +".jpg")
        if Imgpath_Vs_SNR_State[Img]==ReturnCode_SNR_nOK:
            shutil.copyfile(Img, OutputBadSNR_Folder +"\\BadRead_" + str(Indexer) + SNR +".jpg")